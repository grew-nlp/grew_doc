rule select_one {
  pattern { N[!select] }
  without { N -> M; M.__id__ < N.__id__}
  without { M -> N; M.__id__ < N.__id__}
  commands { N.select=yes }
}

package propagate {
  rule down {
    pattern { M[select]; N[!select]; M -> N }
    commands { N.select = yes }
  }
  rule up {
    pattern { M[!select]; N[select]; M -> N }
    commands { M.select = yes }
  }
}

rule remove_unselected {
  pattern { N[!select]; }
  commands { del_node N; }
}

rule clean {
  pattern { N[select]; }
  commands { del_feat N.select; }
}

strat main {
  Seq (
    select_one,
    Onf (propagate),
    Onf (remove_unselected),
    Onf (clean),
  )
}